// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2024 16:52:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PWM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PWM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Reset;
reg WE_disable_pwm;
reg WE_enable_pwm;
reg WE_impuls_high;
reg WE_impuls_low;
reg WE_period_high;
reg WE_period_low;
reg [7:0] impuls_high;
reg [7:0] impuls_low;
reg [7:0] period_high;
reg [7:0] period_low;
// wires                                               
wire out_pwm;

// assign statements (if any)                          
PWM i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Reset(Reset),
	.WE_disable_pwm(WE_disable_pwm),
	.WE_enable_pwm(WE_enable_pwm),
	.WE_impuls_high(WE_impuls_high),
	.WE_impuls_low(WE_impuls_low),
	.WE_period_high(WE_period_high),
	.WE_period_low(WE_period_low),
	.impuls_high(impuls_high),
	.impuls_low(impuls_low),
	.out_pwm(out_pwm),
	.period_high(period_high),
	.period_low(period_low)
);
initial 
begin 
#100000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #40000 1'b1;
	#40000;
end 
// period_low[ 7 ]
initial
begin
	period_low[7] = 1'b0;
	period_low[7] = #40000 1'b1;
	period_low[7] = #300000 1'b0;
end 
// period_low[ 6 ]
initial
begin
	period_low[6] = 1'b0;
	period_low[6] = #40000 1'b1;
	period_low[6] = #300000 1'b0;
end 
// period_low[ 5 ]
initial
begin
	period_low[5] = 1'b0;
	period_low[5] = #40000 1'b1;
	period_low[5] = #300000 1'b0;
end 
// period_low[ 4 ]
initial
begin
	period_low[4] = 1'b0;
end 
// period_low[ 3 ]
initial
begin
	period_low[3] = 1'b0;
	period_low[3] = #40000 1'b1;
	period_low[3] = #300000 1'b0;
end 
// period_low[ 2 ]
initial
begin
	period_low[2] = 1'b0;
end 
// period_low[ 1 ]
initial
begin
	period_low[1] = 1'b0;
end 
// period_low[ 0 ]
initial
begin
	period_low[0] = 1'b0;
end 

// WE_period_low
initial
begin
	WE_period_low = 1'b0;
	WE_period_low = #200000 1'b1;
	WE_period_low = #80000 1'b0;
end 
// period_high[ 7 ]
initial
begin
	period_high[7] = 1'b0;
end 
// period_high[ 6 ]
initial
begin
	period_high[6] = 1'b0;
end 
// period_high[ 5 ]
initial
begin
	period_high[5] = 1'b0;
end 
// period_high[ 4 ]
initial
begin
	period_high[4] = 1'b0;
end 
// period_high[ 3 ]
initial
begin
	period_high[3] = 1'b0;
end 
// period_high[ 2 ]
initial
begin
	period_high[2] = 1'b0;
end 
// period_high[ 1 ]
initial
begin
	period_high[1] = 1'b0;
	period_high[1] = #360000 1'b1;
	period_high[1] = #300000 1'b0;
end 
// period_high[ 0 ]
initial
begin
	period_high[0] = 1'b0;
	period_high[0] = #360000 1'b1;
	period_high[0] = #300000 1'b0;
end 

// WE_period_high
initial
begin
	WE_period_high = 1'b0;
	WE_period_high = #520000 1'b1;
	WE_period_high = #80000 1'b0;
end 
// impuls_low[ 7 ]
initial
begin
	impuls_low[7] = 1'b0;
	impuls_low[7] = #680000 1'b1;
	impuls_low[7] = #220000 1'b0;
end 
// impuls_low[ 6 ]
initial
begin
	impuls_low[6] = 1'b0;
	impuls_low[6] = #680000 1'b1;
	impuls_low[6] = #220000 1'b0;
end 
// impuls_low[ 5 ]
initial
begin
	impuls_low[5] = 1'b0;
	impuls_low[5] = #680000 1'b1;
	impuls_low[5] = #220000 1'b0;
end 
// impuls_low[ 4 ]
initial
begin
	impuls_low[4] = 1'b0;
	impuls_low[4] = #680000 1'b1;
	impuls_low[4] = #220000 1'b0;
end 
// impuls_low[ 3 ]
initial
begin
	impuls_low[3] = 1'b0;
end 
// impuls_low[ 2 ]
initial
begin
	impuls_low[2] = 1'b0;
	impuls_low[2] = #680000 1'b1;
	impuls_low[2] = #220000 1'b0;
end 
// impuls_low[ 1 ]
initial
begin
	impuls_low[1] = 1'b0;
end 
// impuls_low[ 0 ]
initial
begin
	impuls_low[0] = 1'b0;
end 

// WE_impuls_low
initial
begin
	WE_impuls_low = 1'b0;
	WE_impuls_low = #780000 1'b1;
	WE_impuls_low = #80000 1'b0;
end 
// impuls_high[ 7 ]
initial
begin
	impuls_high[7] = 1'b0;
end 
// impuls_high[ 6 ]
initial
begin
	impuls_high[6] = 1'b0;
end 
// impuls_high[ 5 ]
initial
begin
	impuls_high[5] = 1'b0;
end 
// impuls_high[ 4 ]
initial
begin
	impuls_high[4] = 1'b0;
end 
// impuls_high[ 3 ]
initial
begin
	impuls_high[3] = 1'b0;
end 
// impuls_high[ 2 ]
initial
begin
	impuls_high[2] = 1'b0;
end 
// impuls_high[ 1 ]
initial
begin
	impuls_high[1] = 1'b0;
	impuls_high[1] = #920000 1'b1;
	impuls_high[1] = #260000 1'b0;
end 
// impuls_high[ 0 ]
initial
begin
	impuls_high[0] = 1'b0;
end 

// WE_impuls_high
initial
begin
	WE_impuls_high = 1'b0;
	WE_impuls_high = #1040000 1'b1;
	WE_impuls_high = #80000 1'b0;
end 

// WE_disable_pwm
initial
begin
	WE_disable_pwm = 1'b0;
	WE_disable_pwm = #20000 1'b1;
	WE_disable_pwm = #100000 1'b0;
	WE_disable_pwm = #1540000 1'b1;
	WE_disable_pwm = #140000 1'b0;
end 

// WE_enable_pwm
initial
begin
	WE_enable_pwm = 1'b0;
	WE_enable_pwm = #1220000 1'b1;
	WE_enable_pwm = #140000 1'b0;
	WE_enable_pwm = #640000 1'b1;
	WE_enable_pwm = #160000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #20000 1'b1;
	Reset = #92140000 1'b0;
	Reset = #1280000 1'b1;
end 
endmodule

